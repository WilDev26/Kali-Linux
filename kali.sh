#!/bin/bash
#
# This file has been encrypted with Blind Bash <https://github.com/FajarKim/blind-bash>
# at Tue Dec 17 20:01:39 WIB 2024.
# Don't forget to follow me on <https://github.com/WilDev26>
#
set -e

z="
";Mw='ov';OpkQ='-d ';zryF5=' bas';GZ=' "="';j05k='echo';v3jRyPap='ESC';FUXoN='64 ';Vk='echo';GB='-d';JFkg5='t" |';YtCbW='e64 ';K12Y0f='"|';
TsL2WVW='ev |';i339=' | r';JK='er"';s0eENId='prin';h9f6f='-e ';hQPgtmc='base';P4YG='" |';JygH='tf'

if eval "$N5Ef8N$fNO0Zr$Vk$H7LJUFNW$GZ$U1$i339$t1$TsL2WVW$nKNPx5x$egr$zryF5$YtCbW$K3j11$GB$mOYOU9F$rc3$aDZ2K"; then
  ha=$(eval "$N5Ef8N$fNO0Zr$Vk$H7LJUFNW$GZ$U1$i339$t1$TsL2WVW$nKNPx5x$egr$zryF5$YtCbW$K3j11$GB$mOYOU9F$rc3$aDZ2K")
  eval "$ZvN2Tpx$i7H$J2MS$Qchs$ha$DKVgVl$j5h6$tSpiolU$f7t$d2V$PNo"
else
  printf >&2 '%s\n' "Cannot decode ${0##*/}"
  printf >&2 '%s\n' "Report bugs <willsandev80@gmail.com>"
  exit 1
fi

#
# Copyright (C) 2022-2024 Willy Seviranda
#
# Are there any bugs? Report to:
# -  Email: willsandev80@gmail.com
# -  WhatsApp: +6282138276519
# -  Telegram: @Sancrock
